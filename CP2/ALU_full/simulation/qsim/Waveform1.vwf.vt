// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/30/2022 15:03:28"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CSA_32
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CSA_32_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] a1;
reg [31:0] b1;
reg cin;
// wires                                               
wire cout;
wire [31:0] sum;

// assign statements (if any)                          
CSA_32 i1 (
// port map - connection between master ports and signals/registers   
	.a1(a1),
	.b1(b1),
	.cin(cin),
	.cout(cout),
	.sum(sum)
);
initial 
begin 
#1000000 $finish;
end 
// a1[ 31 ]
initial
begin
	a1[31] = 1'b0;
end 
// a1[ 30 ]
initial
begin
	a1[30] = 1'b0;
end 
// a1[ 29 ]
initial
begin
	a1[29] = 1'b0;
end 
// a1[ 28 ]
initial
begin
	a1[28] = 1'b0;
end 
// a1[ 27 ]
initial
begin
	a1[27] = 1'b0;
end 
// a1[ 26 ]
initial
begin
	a1[26] = 1'b0;
end 
// a1[ 25 ]
initial
begin
	a1[25] = 1'b0;
end 
// a1[ 24 ]
initial
begin
	a1[24] = 1'b0;
end 
// a1[ 23 ]
initial
begin
	a1[23] = 1'b0;
end 
// a1[ 22 ]
initial
begin
	a1[22] = 1'b0;
end 
// a1[ 21 ]
initial
begin
	a1[21] = 1'b0;
end 
// a1[ 20 ]
initial
begin
	a1[20] = 1'b0;
end 
// a1[ 19 ]
initial
begin
	a1[19] = 1'b0;
end 
// a1[ 18 ]
initial
begin
	a1[18] = 1'b0;
end 
// a1[ 17 ]
initial
begin
	a1[17] = 1'b0;
end 
// a1[ 16 ]
initial
begin
	a1[16] = 1'b0;
end 
// a1[ 15 ]
initial
begin
	a1[15] = 1'b0;
end 
// a1[ 14 ]
initial
begin
	a1[14] = 1'b0;
end 
// a1[ 13 ]
initial
begin
	a1[13] = 1'b0;
end 
// a1[ 12 ]
initial
begin
	a1[12] = 1'b0;
end 
// a1[ 11 ]
initial
begin
	a1[11] = 1'b0;
end 
// a1[ 10 ]
initial
begin
	a1[10] = 1'b0;
end 
// a1[ 9 ]
initial
begin
	a1[9] = 1'b0;
end 
// a1[ 8 ]
initial
begin
	a1[8] = 1'b0;
end 
// a1[ 7 ]
initial
begin
	a1[7] = 1'b0;
end 
// a1[ 6 ]
initial
begin
	a1[6] = 1'b0;
end 
// a1[ 5 ]
initial
begin
	a1[5] = 1'b0;
end 
// a1[ 4 ]
initial
begin
	a1[4] = 1'b0;
end 
// a1[ 3 ]
initial
begin
	a1[3] = 1'b0;
end 
// a1[ 2 ]
initial
begin
	a1[2] = 1'b0;
end 
// a1[ 1 ]
initial
begin
	a1[1] = 1'b0;
end 
// a1[ 0 ]
initial
begin
	a1[0] = 1'b0;
end 
// b1[ 31 ]
initial
begin
	b1[31] = 1'b0;
end 
// b1[ 30 ]
initial
begin
	b1[30] = 1'b0;
end 
// b1[ 29 ]
initial
begin
	b1[29] = 1'b0;
end 
// b1[ 28 ]
initial
begin
	b1[28] = 1'b0;
end 
// b1[ 27 ]
initial
begin
	b1[27] = 1'b0;
end 
// b1[ 26 ]
initial
begin
	b1[26] = 1'b0;
end 
// b1[ 25 ]
initial
begin
	b1[25] = 1'b0;
end 
// b1[ 24 ]
initial
begin
	b1[24] = 1'b0;
end 
// b1[ 23 ]
initial
begin
	b1[23] = 1'b0;
end 
// b1[ 22 ]
initial
begin
	b1[22] = 1'b0;
end 
// b1[ 21 ]
initial
begin
	b1[21] = 1'b0;
end 
// b1[ 20 ]
initial
begin
	b1[20] = 1'b0;
end 
// b1[ 19 ]
initial
begin
	b1[19] = 1'b0;
end 
// b1[ 18 ]
initial
begin
	b1[18] = 1'b0;
end 
// b1[ 17 ]
initial
begin
	b1[17] = 1'b0;
end 
// b1[ 16 ]
initial
begin
	b1[16] = 1'b0;
end 
// b1[ 15 ]
initial
begin
	b1[15] = 1'b0;
end 
// b1[ 14 ]
initial
begin
	b1[14] = 1'b0;
end 
// b1[ 13 ]
initial
begin
	b1[13] = 1'b0;
end 
// b1[ 12 ]
initial
begin
	b1[12] = 1'b0;
end 
// b1[ 11 ]
initial
begin
	b1[11] = 1'b0;
end 
// b1[ 10 ]
initial
begin
	b1[10] = 1'b0;
end 
// b1[ 9 ]
initial
begin
	b1[9] = 1'b0;
end 
// b1[ 8 ]
initial
begin
	b1[8] = 1'b0;
end 
// b1[ 7 ]
initial
begin
	b1[7] = 1'b0;
end 
// b1[ 6 ]
initial
begin
	b1[6] = 1'b0;
end 
// b1[ 5 ]
initial
begin
	b1[5] = 1'b0;
end 
// b1[ 4 ]
initial
begin
	b1[4] = 1'b0;
end 
// b1[ 3 ]
initial
begin
	b1[3] = 1'b0;
end 
// b1[ 2 ]
initial
begin
	b1[2] = 1'b0;
end 
// b1[ 1 ]
initial
begin
	b1[1] = 1'b0;
end 
// b1[ 0 ]
initial
begin
	b1[0] = 1'b0;
end 

// cin
initial
begin
	cin = 1'b0;
end 
endmodule

